---
title: "SheffieldR : Quarto for Slides"
author:
  - name: Neil Shephard
    orcid: 0000-0001-8301-6857
    email: n.shephard@sheffield.ac.uk
    affiliations: RSE, University of Sheffield
from: markdown+emoji
format:
  clean-revealjs:
  # revealjs:
  #   theme: solarized
    incremental: false
    scrollable: true
    slide-number: true
    show-slide-number: speaker
    auto-stretch: false
    chalkboard: true
    # embed-resources: true
    # standalone: true
revealjs-plugins:
  - confetti
footer: "**Slides** : [**ns-rse.github.io/SheffieldR-quarto-for-slides**](https://ns-rse.github.io/SheffieldR-quarto-for-slides)"
project:
  preview:
    port: 7864
    host: localhost
    watch-inputs: true

---

## Scan This!

View Slides : [**ns-rse.github.io/SheffieldR-quarto-for-slides**](ns-rse.github.io/SheffieldR-quarto-for-slides)

{{< qrcode https://ns-rse.github.io/SheffieldR-quarto-for-slides width=400 height=400 >}}


::: {.notes}
You can go the URL [**ns-rse.github.io/SheffieldR-quarto-for-slides**](ns-rse.github.io/SheffieldR-quarto-for-slides) to
view the slides or if you use a browser on your phone which is synced with your desktop then you can scan this QR code
and send it to your laptops browser and it will take you to these slides.
:::

## Overview

+ Background
+ Prerequisites
+ Using a template
  + Necessary Changes
  + Initial Publish
+ Markdown (briefly)
+ Modifying slides
+ Publishing

::: {.notes}
I thought it might be useful to cover a bit of history with regards to the philosophy that underpins Quarto, then go
over a live example of how to use a template to make RevealJS Slides that are hosted on GitHub Pages and edit the
Markdown.

This _isn't_ an exposition of Markdown and writing Quarto documents, its more focused on working with and publishing
slides on GitHub.

:::

## Literate Programming - Origins

:::: {.columns}
::: {.column width="50%"}
> a computer program is given as an explanation of how it works in a natural language, such as English, interspersed
(embedded) with snippets of macros and traditional source code, from which compilable source code can be
generated.^[[Wikipedia - Literate programming](https://en.wikipedia.org/wiki/Literate_programming)]
:::
::: {.column width="50%"}
![[_Literate Programming_ - Donald Knuth](https://en.wikipedia.org/wiki/Literate_programming)](https://upload.wikimedia.org/wikipedia/en/6/62/Literate_Programming_book_cover.jpg)
:::
::::

::: {.notes}
Quarto and other languages like it such as RMarkdown and [Org-mode](https://orgmode.org) are literate programming
languages which may be an unfamiliar term so I've borrowed the definition from Wikipedia.

The idea was originally proposed and developed the computer scientist Donald Knuth, and he literally wrote the book on it.
:::

## Literate Programming - Better Programmes

:::: {.columns}
::: {.column width="50%"}
> My programs are not only explained better than ever before; they also are better programs, because the new methodology
encourages me to do a better job.^[[Knuth (1984)](http://www.literateprogramming.com/knuthweb.pdf)]
:::
::: {.column width="50%"}
![[_Literate Programming_ - Donald Knuth](https://en.wikipedia.org/wiki/Literate_programming)](https://upload.wikimedia.org/wikipedia/en/6/62/Literate_Programming_book_cover.jpg)
:::
::::

::: {.notes}
Whilst originating in computer science the principle has seen wide spread adoption in data science because it encourages
reproducible research and facilitates open access to research.

As Knuth found when he adopted the practice it _improved_ the quality of the programmes he wrote and I've found the same
is true when writing documents myself since adopting the practice over 20 years ago.
:::

## Background - Pedigree

+ [WEB](https://en.wikipedia.org/wiki/Web_(programming_system)) ([Knuth & Levy
  (2001)](https://www-cs-faculty.stanford.edu/~knuth/cweb.html))
+ [noweb](https://en.wikipedia.org/wiki/Noweb)
+ [S](https://en.wikipedia.org/wiki/S_(programming_language)) ([Becker, Chambers & Wilks
  (1988)](https://dl.acm.org/doi/abs/10.5555/43380))
+ [Sweave](https://web.archive.org/web/20100130021808/http://www.statistik.lmu.de/~leisch/Sweave/) ([Leisch
  F. (2002a)](http://www.ci.tuwien.ac.at/~leisch/Sweave); [Leisch F
  (2002b)](https://journal.r-project.org/articles/RN-2002-025/); [Leisch F
  (2003)](https://journal.r-project.org/articles/RN-2003-013/))
+ [RMarkdown](https://rmarkdown.rstudio.com/) ([R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/))

. . .

+ :tada: [Quarto](https://quarto.org) :tada:

::: {.notes}
Quarto has a long pedigree and is the latest form of literate programming. Knuths WEB language was followed by a number
of variants most of which worked with his document preparation system [TeX](https://tug.org/). One of these dialects was
noweb and noweb underpinned an early integration of Tex/LaTeX and S code (S being the original language specification by
Becker, Chambers and Wilks which R is an implementation of) this was developed by Freidrich Liesch who wrote and
maintained the Sweave package.

More recently with the rise in popularity of Markdown, a simple form of markup language and the increase in popularity
of R saw the development of RMarkdown which some of you might be familiar with.

The last year or two have seen the development of and release of Quarto which is the next iteration and allows embedding
of not just R code within the document but other languages such as [Python](https://python.org),
[Julia](https://julialang.org) and [Observable](https://observablehq.com/) a data analysis and visualisation language in
JavaScript.

Part of the flexibility of Quarto is that its underpinned by [Pandoc](https://pandoc.org/) which is a powerful tool for
converting documents between different markup languages, including PDF and HTML.
:::


## Pre-requisites

Need a few things to get going...

. . .

+ [Git](https://git-scm.com)
+ [GitHub](https://github.com/) account (ideally academic `@<somewhere>.ac.uk`).
+ RStudio configured with Git^[[Let’s Git started | Happy Git and GitHub for the useR](https://happygitwithr.com/)] (or similar
  e.g. [Emacs](https://www.gnu.org/software/emacs/)/[ESS](https://ess.r-project.org)/[Magit](https://magit.vc) or
  [VSCode](https://code.visualstudio.com/)).
+ [Jupyter](https://jupyter.org/) if using Python.
+ Quarto [installed](https://quarto.org/docs/get-started/).

::: {.notes}
Ok, now that I've covered some of the background going to move on and hopefully demonstrate how to use Quarto to write
RevealJS slides that are hosted on GitHub and can be viewed in a web-browser. This has a number of advantages as you'll
never have to worry about getting your slides to meeting organisers, you just need a working internet connection which
these days is fairly common. As a consequence you can keep on working on your slides right up to the last minute (as
long as you remember to publish the changes!).

There are however a few pre-requisities for using this system. You need Git installed and a academic email address I'd
recommend signing up with that, you get a few more features that are usually reserved for paying customers.

You also need a development environment which will help make some of the tasks of editing files and working with Git
easier.

If you're not already set up with one I'd recommend RStudio which I'm going using today.

There is a really useful site from Jenny Bryan on how to setup and configure RStudio and Git
which I would recommend.

There are of course alternatives, personally I use Emacs with Emacs Speaks Statistics and
Magit, another popular choice is VSCode, but what you use is somewhat secondary, what I
hope to convey to you is the essence of the workflow and the principles of working in this manner.

Perhaps most importantly a willingness to learn comes in pretty handy, if you're new to this approach it will seem
frustrating to start with, but persevere, it gets easier and is a lot faster than copying and pasting figures and tables
into Word documents and then tweaking them or replacing them when data changes. As Donald Knuth said, its fun!
:::

## Quarto RevealJS Template

[Quarto RevealJS Template](https://github.com/ns-rse/quarto-revealjs-template) includes...

+ Sample slides with many examples.
+ [GitHub Workflow](https://docs.github.com/en/actions/using-workflows)to publish pages.
+ Instructions on usage.
+ Thanks to [David Wilby](https://www.davidwilby.dev/) and [Alex Coleman](https://github.com/Sparrow0hawk/).


[github.com/ns-rse/quarto-revealjs-template](https://github.com/ns-rse/quarto-revealjs-template)

::: {.notes}
To make it simple to use this workflow there is a Quarto RevealJS template in my GitHub repository that can be used.

It uses a [GitHub Workflow](https://docs.github.com/en/actions/using-workflows) and the `README.md` on the front page has
instructions on usage and I'm hoping to take you through this process today.

I have to say this isn't all my own work, I used a workflow my colleague David Wilby originally setup in for slides I
prepared for a talk I was invited to give in Leeds on using [pre-commit](https://pre-commit.com). The person who invited
me, Alex Coleman, liked the setup and used my slides as a basis for making a Template and I've then borrowed that back
and extended it to its current state.
:::

## Using Quarto RevealJS Template

:::: {.columns}
::: {.column width=30%}

+ Go to [github.com/ns-rse/quarto-revealjs-template](https://github.com/ns-rse/quarto-revealjs-template)
+ Make a copy to your account using the "_Use This Template_" button.
+ Give repository a unique name.
:::
::: {.column width=70%}
![Cloning the template](img/github_quarto_revealjs_template_front.png)
:::
::::

::: {.notes}
The first step to using this template is to make a copy to your GitHub account.

To do this go to the repository and find the _Use This Template_ which is on the top right in green, click on it and
you'll be prompted to give your repository a new and unique name. You can use anything you want as long as you don't
already have a repository with that name in your GitHub account.
:::

## Configuring Repository


:::: {.columns}
::: {.column width=40%}

+ _Settings > Actions > General > Workflow Permissions > Read and write_
:::
::: {.column width=60%}
![Changing Workflow Permissions](img/github_quarto_settings_action01.png){height="250"}
![Changing Workflow Permissions](img/github_quarto_settings_action02.png){height="250"}
:::
::::

::: {.notes}
A key change after cloning the repository is that you need to change the permissions so that the site will be published
automatically when you push changes to GitHub.

I'll explain more about how this works bit but because this is important and you're in GitHub after using the template I
find it good practice to make the change now so I don't forget to do it later and then end up scratching my head as to
why the slides haven't been published.

So you go to _Settings_ tab along the top, then in the menu on the left selection _Actions > General_. Scroll down and
you can change the _Workflow Permissions_ to _Read and Write permissions_ which allows [GitHub
Workflows])(<https://docs.github.com/en/actions/using-workflows>) to read and write to branches.
:::

## Cloning - URL

:::: {.columns}
::: {.column width="30%"}

+ Code button
:::
::: {.column width="70%"}
:::
![Getting repository URL for cloning](img/github_quarto_cloning.png)
::::

::: {.notes}
Now that you have copied the template to your account and have a repository of your own you will want to get a copy of
the files locally on your own computer. In Git parlance this is called cloning and on GitHub the green button at the top
of the front page of the repository allows you to copy links to clone a repository.

Whether use use `https` or `ssh` depends on how you've setup RStudio but the safest option is to use `https` (although
long term I would recommend configuring and using SSH keys as they are faster and easier).
:::

## RStudio Cloning - New Project

:::: {.columns}
::: {.column width="30%"}
+ _File > **New Project** > Version Control > Git_.^[[Let’s Git started | Happy Git and GitHub for the useR](https://happygitwithr.com/)]
:::
::: {.column width="70%"}
![New Project](img/rstudio_new_project_cloning1.png)
:::
::::

::: {.notes}
You now need to start a new Project in RStudio, from the File menu select New Project and the following dialog will
appear, select _Version Control_.
:::


## RStudio Cloning - Version Control

:::: {.columns}
::: {.column width="30%"}
+ _File > New Project > **Version Control** > Git_.^[[Let’s Git started | Happy Git and GitHub for the useR](https://happygitwithr.com/)]
:::
::: {.column width="70%"}
![New Project](img/rstudio_new_project_cloning2.png)
:::
::::

::: {.notes}
...and you progress to the next dialog. We are cloning a Git repository rather than Subversion so select Git.
:::
## RStudio Cloning - Git

:::: {.columns}
::: {.column width="30%"}
+ _File > New Project > Version Control > **Git**_.^[[Let’s Git started | Happy Git and GitHub for the useR](https://happygitwithr.com/)]
:::
::: {.column width="70%"}
![New Project](img/rstudio_new_project_cloning3.png)
:::
::::


::: {.notes}
You now need to use the URL you copied from GitHub and paste it into the _Repository URL_ field, you should give a
_Project directory name_ and typically this would be the same name that you gave your repository when you used the
template (you can copy and paste the last bit of the URL, removing the `.git` if you want).

The last field required is where to create the project and clone the repository to, this will depend on where you keep
your files.
:::

## Install Themes and Extensions

+ Themes and extensions need installing

``` {.bash}
quarto install --no-prompt extension jmbuhr/quarto-qrcode
quarto install --no-prompt extension grantmcdermott/quarto-revealjs-clean
quarto install --no-prompt extension ArthurData/quarto-confetti
```

::: {.notes}
These slides use some extensions for generating QR codes and making Confetti and a custom theme. I'll explain more about
extensions and themes in a bit but before you can proceed you need to install the themes on your computer.
:::

## Configuration : `_quarto.yaml`

+ Define project type (`website`)
+ Set `title`, `site-url` and `description`

:::: {.columns}
::: {.column width="50%"}
**Before**
``` {.yaml}
project:
  type: website

website:
  title: "<TITLE>"
  site-url: https://<YOUR_GITHUB_USERNAME>.github.io/<NAME_OF_REPOSITORY>
  description: "Using Quarto to make slides"
```
:::
::: {.column width="50%"}
**After**
``` {.yaml}
project:
  type: website

website:
  title: "SheffieldR - Live Demo!"
  site-url: https://ns-rse.github.io/live-demo
  description: "A Live Demo of How to use Quarto RevealJS Template"
```
:::
::::

::: {.notes}
You will want to configure the slides to your own taste or preferences.

This is done via two files the first is `_quarto.yaml` file which allows you to define the project type, which in this
case is a website and you can set the `title`, `site-url` and `description`.
:::



## `index.qmd` YAML Header

``` {.yaml}
---
title: "Live Quarto Demo! :tada:"
author:
  - name: Neil Shephard
    orcid: 0000-0001-8301-6857
    email: n.shephard@sheffield.ac.uk
    affiliations: RSE, University of Sheffield
from: markdown+emoji
format:
  clean-revealjs:
    incremental: false
    scrollable: true
    slide-number: true
    show-slide-number: speaker
    auto-stretch: false
    chalkboard: true
    # embed-resources: true
    # standalone: true
revealjs-plugins:
  - confetti
footer: "**Slides** : [**ns-rse.github.io/quarto-demo**](https://ns-rse.github.io/quarto-demo)"
project:
  preview:
    port: 7864
    host: localhost
    watch-inputs: true

---
```

::: {.notes}
The other file that settings reside in is the YAML header of `index.qmd` such as the author details,
footer, what extensions or plugins are used and so forth. So open up the `index.qmd** and start editing this header.

Put your name, your ORCiD number, email address and affiliation.  The rest you can mostly leave in place but you will
probably want to change the footer as its useful for the audience to see the URL where they can view the slides at all
times.

You also use this file to define other common slide properties such as the theme, whether bullet points are to appear
incrementally, whether to include the chalkboard feature which is enabled for these slides and introduces a button here
to bring up a chalk board which you can write on. You also define common footers in this file.

**NB** I have two git accounts with different SSH keys so need to tweak my `.git/config` to make sure the correct key is
used.

```
[core]
    sshCommand = ssh -i ~/.ssh/id_ed25519 -F /dev/null
```
:::


<!-- ## Initial Publish -->

<!-- + `quarto publish` -->
<!-- + Select `Github Pages` if asked (may depend on Quarto version). -->
<!-- + Creates a special branch `gh-pages` which holds HTML. -->
<!-- + Pushes branch to GitHub. -->
<!-- + View slides at -->
<!--   [https://<username>.github.io/my_first_quarto_slides/](https://ns-rse.github.io/my_first_quarto_slides/) -->

<!-- ::: {.notes} -->
<!-- You've used a template and created a repository in your GitHub account and configured it to publish pages, cloned it -->
<!-- to your local computer and installed the themes and extensions. The next step is to make an initial publish of your -->
<!-- pages. -->

<!-- This is done using the `quarto publish` command. It creates a special branch in your Git repository called `gh-pages` -->
<!-- which contains the HTML output. It then pushes the branch to GitHub, configuring it to make the pages on pushes. -->

<!-- You can then view the slides at a dedicated URL. This will depend on your username and the name you gave to your copy of -->
<!-- the template when you used it, but its a consistent nomenclature for the paths so fairly easy to remember. -->
<!-- ::: -->


## Initial Publish

:::: {.columns}
::: {.column width="30%"}
``` {.bash}
❱ quarto publish
? Provider:
  Quarto Pub
❯ GitHub Pages
  Posit Connect
  Netlify
  Confluence
```
:::
::: {.column width="70%"}
``` {.bash}
❱ quarto publish
? Provider: › GitHub Pages
? Publish site to https://<YOUR_GITHUB_USERNAME>.github.io/<NAME_OF_REPOSITORY using gh-pages? (Y/n) › Yes
Switched to a new branch 'gh-pages'
[gh-pages (root-commit) 20ba65a] Initializing gh-pages branch
remote:
remote: Create a pull request for 'gh-pages' on GitHub by visiting:
remote:      https://github.com/slackline/quarto-demo/pull/new/gh-pages
remote:
To github.com:slackline/quarto-demo.git
 * [new branch]      HEAD -> gh-pages
Switched to branch 'main'
Your branch is up to date with 'origin/main'.
From github.com:slackline/quarto-demo
 * branch            gh-pages   -> FETCH_HEAD
Rendering for publish:



processing file: index.qmd
1/5
2/5 [fig-airquality]
3/5
4/5 [fig-airquality2]
5/5
output file: index.knit.md

pandoc
  to: revealjs
  from: markdown+emoji
  output-file: index.html
  standalone: true
  title-prefix: <TITLE>
  wrap: none
  default-image-extension: png
  html-math-method:
    method: mathjax
    url: >-
      https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full
  slide-level: 2
  incremental: false

metadata
  link-citations: true
  width: 1050
  height: 700
  margin: 0.1
  center: false
  navigationMode: linear
  controlsLayout: edges
  controlsTutorial: false
  hash: true
  history: true
  hashOneBasedIndex: false
  fragmentInURL: false
  transition: none
  backgroundTransition: none
  pdfSeparateFragments: false
  lang: en
  auto-stretch: false
  theme:
    - default
    - _extensions/grantmcdermott/clean/clean.scss
  menu:
    side: left
  slideNumber: true
  date-format: long
  revealjs-plugins:
    - confetti
  title: Template Revealjs Quarto site
  author:
    - name: Your Name
      orcid: 0000-0000-0000-0000
      email: email@address.work
      affiliations: Employers Name
  footer: '**Slides** : [**github-username.github.io/<repository>**](https://github-username.github.io/<repository>)'
  showSlideNumber: speaker
  chalkboard: true

Preparing worktree (resetting branch 'gh-pages'; was at 20ba65a)
branch 'gh-pages' set up to track 'origin/gh-pages'.
HEAD is now at 20ba65a Initializing gh-pages branch
fatal: pathspec '.' did not match any files
[gh-pages 46df001] Built site for gh-pages
 125 files changed, 15421 insertions(+)
 create mode 100644 .nojekyll
 create mode 100644 img/OSC_Sheffield.png
 create mode 100644 index.html
 create mode 100644 index_files/figure-revealjs/fig-airquality2-1.png
 create mode 100644 robots.txt
 create mode 100644 search.json
 create mode 100644 site_libs/clipboard/clipboard.min.js
 create mode 100644 site_libs/quarto-contrib/qrcodejs-v1.0.0/qrcode.js
 create mode 100644 site_libs/quarto-html/light-border.css
 create mode 100644 site_libs/quarto-html/popper.min.js
 create mode 100644 site_libs/quarto-html/quarto-html.min.css
 create mode 100644 site_libs/quarto-html/quarto-syntax-highlighting.css
 create mode 100644 site_libs/quarto-html/tabby.min.js
 create mode 100644 site_libs/quarto-html/tippy.css
 create mode 100644 site_libs/quarto-html/tippy.umd.min.js
 create mode 100644 site_libs/revealjs/dist/reset.css
 create mode 100644 site_libs/revealjs/dist/reveal.css
 create mode 100644 site_libs/revealjs/dist/reveal.esm.js
 create mode 100644 site_libs/revealjs/dist/reveal.esm.js.map
 create mode 100644 site_libs/revealjs/dist/reveal.js
 create mode 100644 site_libs/revealjs/dist/reveal.js.map
 create mode 100644 site_libs/revealjs/dist/theme/fonts/league-gothic/LICENSE
 create mode 100644 site_libs/revealjs/dist/theme/fonts/league-gothic/league-gothic.css
 create mode 100755 site_libs/revealjs/dist/theme/fonts/league-gothic/league-gothic.eot
 create mode 100755 site_libs/revealjs/dist/theme/fonts/league-gothic/league-gothic.ttf
 create mode 100755 site_libs/revealjs/dist/theme/fonts/league-gothic/league-gothic.woff
 create mode 100644 site_libs/revealjs/dist/theme/fonts/source-sans-pro/LICENSE
 create mode 100755 site_libs/revealjs/dist/theme/fonts/source-sans-pro/source-sans-pro-italic.eot
 create mode 100755 site_libs/revealjs/dist/theme/fonts/source-sans-pro/source-sans-pro-italic.ttf
 create mode 100755 site_libs/revealjs/dist/theme/fonts/source-sans-pro/source-sans-pro-italic.woff
 create mode 100755 site_libs/revealjs/dist/theme/fonts/source-sans-pro/source-sans-pro-regular.eot
 create mode 100755 site_libs/revealjs/dist/theme/fonts/source-sans-pro/source-sans-pro-regular.ttf
 create mode 100755 site_libs/revealjs/dist/theme/fonts/source-sans-pro/source-sans-pro-regular.woff
 create mode 100755 site_libs/revealjs/dist/theme/fonts/source-sans-pro/source-sans-pro-semibold.eot
 create mode 100755 site_libs/revealjs/dist/theme/fonts/source-sans-pro/source-sans-pro-semibold.ttf
 create mode 100755 site_libs/revealjs/dist/theme/fonts/source-sans-pro/source-sans-pro-semibold.woff
 create mode 100755 site_libs/revealjs/dist/theme/fonts/source-sans-pro/source-sans-pro-semibolditalic.eot
 create mode 100755 site_libs/revealjs/dist/theme/fonts/source-sans-pro/source-sans-pro-semibolditalic.ttf
 create mode 100755 site_libs/revealjs/dist/theme/fonts/source-sans-pro/source-sans-pro-semibolditalic.woff
 create mode 100644 site_libs/revealjs/dist/theme/fonts/source-sans-pro/source-sans-pro.css
 create mode 100644 site_libs/revealjs/dist/theme/quarto.css
 create mode 100644 site_libs/revealjs/plugin/highlight/highlight.esm.js
 create mode 100644 site_libs/revealjs/plugin/highlight/highlight.js
 create mode 100644 site_libs/revealjs/plugin/highlight/monokai.css
 create mode 100644 site_libs/revealjs/plugin/highlight/plugin.js
 create mode 100644 site_libs/revealjs/plugin/highlight/zenburn.css
 create mode 100644 site_libs/revealjs/plugin/markdown/markdown.esm.js
 create mode 100644 site_libs/revealjs/plugin/markdown/markdown.js
 create mode 100755 site_libs/revealjs/plugin/markdown/plugin.js
 create mode 100755 site_libs/revealjs/plugin/math/katex.js
 create mode 100644 site_libs/revealjs/plugin/math/math.esm.js
 create mode 100644 site_libs/revealjs/plugin/math/math.js
 create mode 100644 site_libs/revealjs/plugin/math/mathjax2.js
 create mode 100644 site_libs/revealjs/plugin/math/mathjax3.js
 create mode 100644 site_libs/revealjs/plugin/math/plugin.js
 create mode 100644 site_libs/revealjs/plugin/notes/notes.esm.js
 create mode 100644 site_libs/revealjs/plugin/notes/notes.js
 create mode 100644 site_libs/revealjs/plugin/notes/plugin.js
 create mode 100644 site_libs/revealjs/plugin/notes/speaker-view.html
 create mode 100644 site_libs/revealjs/plugin/pdf-export/pdfexport.js
 create mode 100644 site_libs/revealjs/plugin/pdf-export/plugin.yml
 create mode 100644 site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.css
 create mode 100644 site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.js
 create mode 100644 site_libs/revealjs/plugin/quarto-line-highlight/plugin.yml
 create mode 100644 site_libs/revealjs/plugin/quarto-support/footer.css
 create mode 100644 site_libs/revealjs/plugin/quarto-support/plugin.yml
 create mode 100644 site_libs/revealjs/plugin/quarto-support/support.js
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/README.md
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/LICENSE.txt
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/css/all.css
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/css/brands.css
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/css/fontawesome.css
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/css/regular.css
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/css/solid.css
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/css/svg-with-js.css
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/css/v4-shims.css
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/css/v4-shims.min.css
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-brands-400.eot
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-brands-400.svg
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-brands-400.ttf
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-brands-400.woff
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-brands-400.woff2
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-regular-400.eot
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-regular-400.svg
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-regular-400.ttf
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-regular-400.woff
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-regular-400.woff2
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-solid-900.eot
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-solid-900.svg
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-solid-900.ttf
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-solid-900.woff
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/font-awesome/webfonts/fa-solid-900.woff2
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/blackboard.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/boardmarker-black.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/boardmarker-blue.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/boardmarker-green.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/boardmarker-orange.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/boardmarker-purple.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/boardmarker-red.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/boardmarker-yellow.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/chalk-blue.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/chalk-green.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/chalk-orange.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/chalk-purple.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/chalk-red.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/chalk-white.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/chalk-yellow.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/sponge.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/img/whiteboard.png
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/plugin.js
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/plugin.yml
 create mode 100644 site_libs/revealjs/plugin/reveal-chalkboard/style.css
 create mode 100644 site_libs/revealjs/plugin/reveal-confetti/confetti.js
 create mode 100644 site_libs/revealjs/plugin/reveal-menu/menu.css
 create mode 100644 site_libs/revealjs/plugin/reveal-menu/menu.js
 create mode 100644 site_libs/revealjs/plugin/reveal-menu/plugin.yml
 create mode 100644 site_libs/revealjs/plugin/reveal-menu/quarto-menu.css
 create mode 100644 site_libs/revealjs/plugin/reveal-menu/quarto-menu.js
 create mode 100644 site_libs/revealjs/plugin/search/plugin.js
 create mode 100644 site_libs/revealjs/plugin/search/search.esm.js
 create mode 100644 site_libs/revealjs/plugin/search/search.js
 create mode 100644 site_libs/revealjs/plugin/zoom/plugin.js
 create mode 100644 site_libs/revealjs/plugin/zoom/zoom.esm.js
 create mode 100644 site_libs/revealjs/plugin/zoom/zoom.js
 create mode 100644 sitemap.xml
origin	git@github.com:slackline/quarto-demo.git (fetch)
origin	git@github.com:slackline/quarto-demo.git (push)
To github.com:slackline/quarto-demo.git
   20ba65a..46df001  HEAD -> gh-pages

[✓] Deploying gh-pages branch to website (this may take a few minutes)
ERROR: TypeError: Invalid URL: 'https://<YOUR_GITHUB_USERNAME>.github.io/<NAME_OF_REPOSITORY/.nojekyll'

Stack trace:
    at getSerialization (ext:deno_url/00_url.js:89:11)
    at new URL (ext:deno_url/00_url.js:359:27)
    at new Request (ext:deno_fetch/23_request.js:300:25)
    at ext:deno_fetch/26_fetch.js:418:27
    at new Promise (<anonymous>)
    at fetch (ext:deno_fetch/26_fetch.js:414:18)
    at file:///home/neil/.local/quarto/quarto-1.4.358/bin/quarto.js:103939:40
    at eventLoopTick (ext:core/01_core.js:188:13)
    at async withSpinner (file:///home/neil/.local/quarto/quarto-1.4.358/bin/quarto.js:38988:16)
    at async Object.publish5 [as publish] (file:///home/neil/.local/quarto/quarto-1.4.358/bin/quarto.js:103933:9)
```

:::
::::

::: {.notes}
Next we're going to use the `quarto publish` command which makes the initial publishing for us, creating the
`gh-pages` branch, rendering the pages and pushing them to GitHub. This should complete ok and once its done you can
navigate to your [repository](https://github.com/slackline/quarto-demo) and look at the `Actions` tab and hopefully see the
pages being deployed.

Once this completes you can look at your slides online. The URL will be your GitHub username followed by `.github.io/quarto-live-demo`

For those following along have how many have been able to publish their slides?
:::

## Slides : `index.qmd`

+ _Now_ you can write your slides!
+ `index.qmd` is the main file to work on.
+ Template includes many examples.

::: {.notes}
Ok we've cloned the template and customised it to work under our account, setup a `gh-pages` branch and pushed the
changes so they are published to a website, _now_ you are finally ready to start writing your slides and customising
them.

In addition to the YAML header the `index.qmd` contains the contents of your slides.

The body is written in Quarto Markdown which is pretty similar to general Markdown.
:::


## Markdown

+ Simple markup language.
+ Separate content from style.
+ Write in ASCII plain text.
+ Simple to version control.

::: {.notes}
Ok we'll now make a very brief digression into Markdown because Quarto uses its own dialect of Markdown which is a
relatively simple markup language.

Markup languages differ from Word Processor software such as Microsoft Word and Google Docs as they separate the content
that you are writing, from the style, which is how it looks because you write in ASCII plain text and adorn the text
with markers which indicate what it should look like and then apply themes to say what certain features should look
like.

Plain text files have the advantage that they are simple to keep under version control which also means they are easy to
work on collaboratively using tools such as [GitHub](https://github.com) or [GitLab](https://gitlab.com).
:::

## Basic Markdown

:::: {.columns}
::: {.column width="50%"}

``` {.markdown}
+ **Bold**
+ _Italics_
+ ~~Strikethrough~~
+ [Search](https://duckduckgo.com)
```

:::
::: {.column width="50%"}

+ **Bold**
+ _Italics_
+ ~~Strikethrough~~
+ [Search](https://duckduckgo.com)
:::
::::

Quarto [documentation](https://quarto.org/docs/authoring/markdown-basics.html) is excellent.

## QR Code Extension

+ [quarto-qrcode](https://github.com/jmbuhr/quarto-qrcode) extension is really useful.

<!-- :::: {.columns} -->
<!-- ::: {.column width="50%"} -->
**Before**

``` {.bash}
{{< qrcode https://ns-rse.github.io/quarto-revealjs-template width=400 height=400 >}}

[ns-rse.github.io/quarto-revealjs-template](https://ns-rse.github.io/quarto-revealjs-template)
```
<!-- ::: -->
<!-- ::: {.column width="50%"} -->
**After**
``` {.bash}
{{< qrcode https://ns-rse.github.io/quarto-live-demo width=400 height=400 >}}

[ns-rse.github.io/quarto-live-demo](https://ns-rse.github.io/quarto-live-demo)
```
<!-- ::: -->
<!-- :::: -->

## Images

+ Embed Images (any image on the internet or locally)

<!-- :::: {.columns} -->
<!-- ::: {.column width="50%"} -->
**Before**
``` {.markdown}
![Relaxing in the mountains](https://live.staticflickr.com/65535/53144704609_c5e6fa8c77_k.jpg){width=700}
```
<!-- ::: -->
<!-- ::: {.column width="50%"} -->
**After**
``` {.markdown}
![SheffieldR Hex](https://raw.githubusercontent.com/SheffieldR/SheffieldR.github.io/main/images/SheffieldR_hex.png){width=400}
```
<!-- ::: -->
<!-- :::: -->

::: {.notes}
On line 162 there is an image embedded, a picture I snapped whilst relaxing on a hiking holiday in the Julian Alps this
summer.

We can modify this and change the embeded image by simply changing the target URL for the image.

Here I insert the Sheffield R Hex image instead `https://github.com/SheffieldR/SheffieldR.github.io/blob/main/images/SheffieldR_hex.png?raw=true`
:::

::: {.notes}
Lets change the first slide to show an image.
:::

## Previewing

:::: {.columns}
::: {.colum width="30%"}
+ Preview slides locally whenever you want using `quarto preview`.
+ Renders files locally and opens them in a new browser tab.
+ **Use regularly when writing your slides!**
:::
::: {.colum width="70%"}
:::
``` {.bash}
Starting python3 kernel...Done

Executing 'index.ipynb'

pandoc
  to: revealjs
  from: markdown+emoji
  output-file: index.html
  standalone: true
  title-prefix: SheffieldR - Quarto for Slides
  wrap: none
  default-image-extension: png
  html-math-method:
    method: mathjax
    url: >-
      https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full
  slide-level: 2
  incremental: false

metadata
  link-citations: true
  width: 1050
  height: 700
  margin: 0.1
  center: false
  navigationMode: linear
  controlsLayout: edges
  controlsTutorial: false
  hash: true
  history: true
  hashOneBasedIndex: false
  fragmentInURL: false
  transition: none
  backgroundTransition: none
  pdfSeparateFragments: false
  lang: en
  auto-stretch: false
  theme:
    - default
    - _extensions/grantmcdermott/clean/clean.scss
  menu:
    side: left
  slideNumber: true
  date-format: long
  revealjs-plugins:
    - confetti
  title: 'SheffieldR : Quarto for Slides'
  author:
    - name: Neil Shephard
      orcid: 0000-0001-8301-6857
      email: n.shephard@sheffield.ac.uk
      affiliations: 'RSE, University of Sheffield'
  footer: '**Slides** : [**ns-rse.github.io/SheffieldR-quarto-for-slides**](https://ns-rse.github.io/SheffieldR-quarto-for-slides)'
  showSlideNumber: speaker
  chalkboard: true

Output created: _site/index.html

Watching files for changes
Browse at http://localhost:4431/index.html
```
::::

::: {.notes}
Now you could stage, commit and push your changes to GitHub and the Workflow Action would kick in and render the pages
for you but that takes a little bit of time as it requires the GitHub runners to setup the environment for
you.

Fortunately you can render your slides locally using `quarto preview` command which makes the HTML files from your
source markdown and start a web-server for you to view the pages _before_ you push them to GitHub.

I'd recommend getting in the habit of previewing your slides regularly before committing and pushing them to GitHub as
that way you catch any errors before they are published (this just makes the feedback loop shorter).

In a terminal when you are in the root of your cloned repository just type `quarto publish`, this will build the pages
and launch a web-browser or new tab and opening up the slides for you to view and you can navigate with the left and
right arrows.
:::

## R Code

:::: {.columns}
::: {.column width="50%"}
**Before**
```{r}
#| label: fig-airquality
#| fig-cap: "Temperature and ozone level."
#| warning: false
#| eval: false
#| echo: true
library(ggplot2)

ggplot(airquality, aes(Temp, Ozone)) +
  geom_point() +
  geom_smooth(method = "loess")
```

:::
::: {.column width="50%"}
**After**
```{r}
#| label: fig-airquality2
#| fig-cap: "Temperature and ozone level."
#| warning: false
#| eval: false
#| echo: true
library(ggplot2)
library(ggdark)

ggplot(airquality, aes(Temp, Ozone)) +
  geom_point() +
  geom_smooth(method = "loess") +
  dark_theme_gray()
```

:::
::::


::: {.notes}
Ok here is where I actually modify some R code, we have a slide defined on line 183 that plots the temperature v's
Ozone. The default theme is used with a white background.

We're going to change this to use the [ggdark theme](https://github.com/nsgrantham/ggdark) instead. We have to load the
library and then we can apply the dark theme.
:::

## Update `renv`

:::: {.columns}
::: {.colum width="50%"}
+ When adding code you probably have the libraries installed locally.
+ **Must** update `renv.lock` to include these so that they are installed when rendering in the Workflow.
:::
::: {.colum width="50%"}
``` {.r}
## Initialise
renv::init()
renv::settings$snapshot.type("all")
## Updating
renv::upgrade()
renv::update()
renv::snapshot()
```
:::
::::

::: {.notes}
When you add code to your slides that use new packages you probably already have them installed locally so the preview
will render. But this won't be the case in the GitHub environment where you slides will be built on-line.

To get round this you _must_ update the `renv.lock`. I've found it can be useful to change the settings for the
`snapshot.type` to `all` and it can be a good opportunity to update any installed packages locally as typically the most
recent version of packages are installed when the GitHub action runs so its useful to have the same versions installed
locally.

You can do that running `renv::Settings$snapshot.type("all")` and then `renv::upgrade()`, `renv::update()` and finally
taking a `renv::snapshot()`.
:::

## Speaker Notes

<!-- :::: {.columns} -->
<!-- ::: {.column width="30%"} -->
+ Add additional notes for yourself.
<!-- ::: -->
<!-- ::: {.column width="70%"} -->
``` {.yaml}
::: {.notes}
I have a terrible memory so rely on speaker notes to remind me what I want to say.
:::
```

![Speaker Notes](img/speaker_notes.png)
<!-- ::: -->
<!-- :::: -->

::: {.notes}
A nice feature of RevealJS common to many slide presentation software is the ability to add speaker notes to the bottom
of every slide.

These can then be viewed by pressing `s` when viewing slides and a new browser window pops up and you can see the
current slide and its notes and a preview of the next slide.
:::

## Changing Themes


:::: {.columns}
::: {.column width="50%"}
Before...

``` {.yaml}
format:
  clean-revealjs:
    incremental: false
    slide-number: true
    show-slide-number: speaker
    auto-stretch: false
```

:::
::: {.column width="50%"}
After...

``` {.yaml}
format:
  # clean-revealjs:
  revealjs:
    theme: solarized
    incremental: false
    slide-number: true
    show-slide-number: speaker
    auto-stretch: false
```

:::
::::

::: {.notes}
Its straight-forward to change themes by editing the relevant section in the YAML header of `index.qmd`.

You can then preview the slides locally to see what they look like, if you're happy then you stage and commit the
changes to Git and push them to GitHub.
:::


## Extensions

:::: {.columns}
::: {.colum width="50%"}
+ Lots of [extensions](https://quarto.org/docs/extensions/).
+ Add functionality.
+ Install to repository locally _and_ adding to GitHub Action.
:::
::: {.colum width="50%"}
``` {.bash}
quarto install --no-prompt extension jmbuhr/quarto-qrcode
quarto install --no-prompt extension grantmcdermott/quarto-revealjs-clean
quarto install --no-prompt extension ArthurData/quarto-confetti
```
:::
::::

::: {.notes}
The template uses a few extensions and these, and any other extensions you need installing locally and by the GitHub
Action that renders the slides as both environments need to be identical.

The included extensions need installing locally with the following command and you would use similar for any others that
you choose to use. Of course, if you change the theme or don't use any of these extensions then you don't need to
complete this step.
:::



## GitHub Actions

:::: {.columns}
::: {.colum width="50%"}
+ GitHub Action uses `.github/workflows/quarto-publish.yaml` to publish.
+ Install extensions.
+ Install R/Python and any packages.
:::
::: {.colum width="50%"}
``` {.yaml}
on:
  push:
    branches: main

name: Render and Publish

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          # To install LaTeX to build PDF book
          tinytex: true
          # uncomment below and fill to pin a version
          # version: 1.2.335

      - name: Install Quarto Extensions
        run: |
          quarto install --no-prompt extension jmbuhr/quarto-qrcode
          quarto install --no-prompt extension grantmcdermott/quarto-revealjs-clean
          quarto install --no-prompt extension ArthurData/quarto-confetti

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4.3.0
        with:
          python-version: '3.10'
          cache: 'pip'
      - run: pip install -r requirements.txt

      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.2.0'

      - name: Install R Dependencies
        uses: r-lib/actions/setup-renv@v2
        with:
          cache-version: 1

      - name: Publish to GitHub Pages (and render)
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions

```
:::
::::

::: {.notes}
Because we want to get all of these changes onto GitHub and we are version controlling our slides you have to stage,
commit and push your changes to GitHub.

There is a special file which I mentioned earlier with regards to extensions that controls the building and rendering of
the slides. This is `.github/workflows/quarto-publish.yaml`. There are a few key sections here that are important beyond
making sure any extensions you are using are installed.
:::

## Extensions - GitHub Action

:::: {.columns}
::: {.colum width="50%"}
+ GitHub Action uses `.github/workflows/quarto-publish.yaml`
:::
::: {.colum width="50%"}
``` {.yaml}
      - name: Install Quarto Extensions
        run: |
          quarto install --no-prompt extension jmbuhr/quarto-qrcode
          quarto install --no-prompt extension grantmcdermott/quarto-revealjs-clean
          quarto install --no-prompt extension ArthurData/quarto-confetti
```
:::
::::

::: {.notes}
For the GitHub Action the theme and extensions that are used are already included in the template are already there, but
if you add any extensions you should add them to the section that Installs Quarto Extensions.
:::


## Software Dependencies

+ R packages you use locally need installing on GitHub.
+ A `step` in GitHub Action called `Install R`.
+ [`r-lib/actions/setup-r@v2`](https://github.com/r-lib/actions/tree/v2/setup-r) installs R.
+ [`r-lib/actions/setup-renv@v2`](https://github.com/r-lib/actions/tree/v2/setup-renv) installs packages.
+ Use [`renv`](https://rstudio.github.io/renv/articles/renv.html) in your project to define packages.

::: {.notes}
Any packages that you have loaded and used in your work will need installing in the computer that builds the website and
renders it on GitHub.

This is configured through a `step` called `Install R` which uses two actions from `r-lib`, the
[`setup-renv`](https://github.com/r-lib/actions/tree/v2/setup-renv) and
[`renv`](https://github.com/r-lib/actions/tree/v2/setup-r).

On your computer you need to initialise an R environment using `renv::init()`. This will write a **lockfile** in the
root of your directory called `renv.lock` which defines the libraries and versions that are installed and running in R
at that point in time. If you're using RStudio it may do this automatically for you, I'm not sure as I don't use RStudio
myself.

Make sure you stage and commit the `renv.lock` file to your git repository so that it gets uploaded to GitHub when you
push your changes, otherwise the new packages won't be included on the build on GitHub and your slides won't render.
:::

## Publish!

:::: {.columns}
::: {.colum width="50%"}
+ Stage, commit and push to GitHub!
+ If on `main` branch Action kicks in.
:::
::: {.colum width="50%"}
``` {.bash}
git commit -u
git commit -m "Updating slides in real time"
git push
```
:::
::::

::: {.notes}
You can stage, commit and push your changes and the GitHub action should kick in and compile and update your website.
:::

## **BONUS** - Linting with `pre-commit`

+ Includes [pre-commit](https://pre-commit.com) hook to lint Markdown.
+ Ensures consistent style used.
+ Configuration via `.markdownlint-cli2.yaml`.
+ Automatically fixes mistakes where possible.
+ [Pre-commit : Protecting your future self](https://rse.shef.ac.uk/blog/pre-commit/)^[More posts on [my
  blog](https://ns-rse.github.io/#category=pre-commit)]

::: {.notes}
The repository includes configuration to use [`pre-commit`](https://rse.shef.ac.uk/blog/pre-commit) hooks to link your Markdown. Linting is the principle of using
a consistent style when writing code and markup so that it is easier for others to read and modify and its really
important when working collaboratively as might be the case when writing slides in this manner. Simple things like
ensuring a consistent line length is used, links are all correctly formatted and so forth.

Configuration of the Markdown linting is via the `markdownlint-cli2.yaml` file and it will automatically fix errors it
finds where possible.

`pre-commit` itself is a Python programme and as such you need to install it on your system, if you're using Linux
chances are you can install it from your package manager, if you're using OSX then you can install it using
[Homebrew](https://brew.sh). On either of these operating systems or if you are using Windows you can install a virtual
environment, and if you're not familiar with this you can see the notes from the course [Conda environments for
effective and reproducible research](https://rse.shef.ac.uk/conda-environments-for-effective-and-reproducible-research/).
:::

## Links

:::: {.columns}
::: {.colum width="50%"}

+ [Quarto](https://quarto.org)
+ [Slide Template](https://github.com/ns-rse/quarto-revealjs-template)
+ [GitHub Workflows](https://docs.github.com/en/actions/using-workflows)
+ [SheffieldR](https://sheffield.github.io)
:::
::: {.colum width="50%"}
+ [Pre-commit : Protecting your future self](https://rse.shef.ac.uk/blog/pre-commit)
+ [RSE blog](https://rse.shef.ac.uk/blog/)
+ [My blog!](https://ns-rse.github.io/)
:::
::::
